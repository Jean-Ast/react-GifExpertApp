{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifContainerItem.js","components/GifsContainer.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","placeholder","autoFocus","getFetchGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","imgItem","id","title","images","downsized_medium","GifContainerItem","className","src","alt","GifsContainer","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAkBnBG,YAAY,0CACZC,WAAS,O,+BCRFC,EAhBG,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEwBC,UAAUH,GAFlC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAa,IAAD,EACjC,MAAO,CACLC,GAAID,EAAQC,GACZC,MAAOF,EAAQE,MACfV,IAAG,UAAEQ,EAAQG,cAAV,aAAE,EAAgBC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCDLO,EAAmB,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC1C,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAgB,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFnB,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCuB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WAGRxB,EAAaC,GAAUwB,MAAK,SAACC,GAC3BH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAGGqB,EDd2BK,CAAa1B,GAAjCa,EAF+B,EAErCN,KAAca,EAFuB,EAEvBA,QAEtB,OACE,qCAEE,oBAAIJ,UAAU,yCAAd,SAAwDhB,IAEvDoB,GACC,mBAAGJ,UAAU,wCAAb,yBAIF,qBAAKA,UAAU,iBAAf,SAEGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAAuCA,GAAhBA,EAAQC,aEnB5BgB,EAAe,WAAO,IAAD,EACI3C,mBAAS,IADb,mBACzB4C,EADyB,KACb7C,EADa,KAGhC,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEG6C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAA8BA,SAAUA,GAApBA,Y,MCV9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.4d066093.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => { // Con { setCategories } desestructuramos las props que se le mandan al componente\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n  \r\n  // Captura el input del usuario, metodo que se manda como referencia a la propiedad onChange del input\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n  // Se lanza cada vez que el usuario presione enter\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); \r\n    \r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cate) => [inputValue, ...cate]); // Le mandamos el input del usuario al setCategories para que cambie el estado de las categories\r\n      setinputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Coloque el Gif que desea buscar aquí\"\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  // Defino setCategories como propiedad requerida al utilizar el método AddCategory\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","\r\n/* Este componente helper (que sirve aislar codigo que hace una tarea que no esta relacionada con ningun componente directamente)\r\n hace la peticion a la API y retorna la informacion de todos los gifs */\r\nconst getFetchGifs = async (category) => {\r\n  const url =\r\n  `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=20&api_key=Ftmghlqr4gnpNnppyabSTr41W6NE65lJ`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((imgItem) => {\r\n    return {\r\n      id: imgItem.id,\r\n      title: imgItem.title,\r\n      url: imgItem.images?.downsized_medium.url, // El ? sirve para preguntar si cada imgItem trae esta imagen, en caso de que no, pues no explotará\r\n    };\r\n  });\r\n  return gifs; // The returns is a promise, con las propiedades de los gifs que necesito\r\n};\r\n\r\nexport default getFetchGifs;","import React from 'react'\r\n/* */\r\nexport const GifContainerItem = ({ id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifContainerItem } from \"./GifContainerItem\";\r\n\r\n/* Este componente dibuja todo el html de los contenedores de gifs, usa el GifContainerItem */\r\n\r\nexport const GifsContainer = ({ category }) => {\r\n  // \r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n    {/* Titulo de la categoria buscada */}\r\n      <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n      {/* Mensaje de Loading */}\r\n      {loading && (\r\n        <p className=\"card animate__animated animate__flash\">Cargando...</p>\r\n      )}\r\n      {/* Contenedor de gifs que lo dibuja por cada input del usuario.\r\n      Recorro todas las imagenes(o data) que obtengo de mi custom hook \"useFetchGifs\" para dibujar cada imagen*/}\r\n      <div className=\"card-container\">\r\n        {/* Con {...imgItem} lo que hacemos es mandarle todas las propiedaes que hemos establecido en el \"getFetchGifs\" */}\r\n        {images.map((imgItem) => (\r\n          <GifContainerItem key={imgItem.id} {...imgItem} /> \r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import{ useEffect, useState } from \"react\";\r\nimport  getFetchGifs  from '../helpers/getFetchGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Hacer peticion y traer imagenes\r\n    // Utilizo el helper \"getFetchGifs\" para traer todas las imágenes del API y cambiar el estado de las categorias\r\n    getFetchGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]); // La categoria en este componente no cambia, significa que la petición al API solo se hará una vez\r\n\r\n\r\n  return state; // state = {data:[], loading: true}\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifsContainer } from \"./components/GifsContainer\";\r\n// Este es el componente principal de la aplicación, el cual contiene la estructura de donde estarán los demás subcomponentes\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      {/* Mandamos la referencia al método setCategories para que el componente AddCategory pueda usarlo */}\r\n      <AddCategory setCategories={setCategories} /> \r\n      <hr />\r\n      <ol>\r\n        {/* Por cada categoria creo un contenedor de Gifs */}\r\n        {categories.map((category) => (\r\n          <GifsContainer key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}